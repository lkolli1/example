spring.datasource.username=postgres
spring.datasource.password=postgress123
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL10Dialect
management.endpoints.web.exposure.include=*
spring.cache.cache-names=employeeCache
spring.cache.type=ehcache
spring.cache.ehcache.config=classpath:ehcache.xml
spring.jackson.default-property-inclusion=NON_NULL
spring.mvc.pathmatch.matching-strategy = ANT_PATH_MATCHER
spring.jackson.serialization.FAIL_ON_EMPTY_BEANS = false

app.jwtSecret=sowjanya
app.jwtExpTimeInMs=88800000
logging.file=my.log
logging.path=D:\
#Optional
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
#
##Maximum no of milliseconds that a client will wait for a connection from the connection pool
spring.datasource.hikari.connectionTimeout=30000

##Minimum no of idle connections  that are maintained by hikariCP in connection pool
spring.datasource.hikari.minimum-idle=10

##configures the maximum pool size
spring.datasource.hikari.maximum-pool-size=50

#Maximum amount of time in milliseconds that a connection is allowed to sit idle in connection pool
#spring.datasource.hikari.idle-timeout=600000

##Maximum life time in milliseconds that a connection in pool after it is closed
spring.datasource.hikari.max-lifetime=1800000

##configures the default auto commit behaviour of connections returned from pool.Default true
spring.datasource.hikari.auto-commit=true

#try enabling leakDetectionThreshold and check which connection is taking more time and not returning
# to Hikari pool
#It is likely that you have a connection leak somewhere, a connection is borrowed
# but never closed (returned).
